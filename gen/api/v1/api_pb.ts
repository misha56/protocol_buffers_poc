// @generated by protoc-gen-es v1.1.1 with parameter "target=ts"
// @generated from file api/v1/api.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum api.v1.GameState
 */
export enum GameState {
  /**
   * @generated from enum value: GAME_STATE_PENDING_UNSPECIFIED = 0;
   */
  PENDING_UNSPECIFIED = 0,

  /**
   * @generated from enum value: GAME_STATE_ONGOING = 1;
   */
  ONGOING = 1,

  /**
   * @generated from enum value: GAME_STATE_PAUSED = 2;
   */
  PAUSED = 2,

  /**
   * @generated from enum value: GAME_STATE_ENDED = 3;
   */
  ENDED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(GameState)
proto3.util.setEnumType(GameState, "api.v1.GameState", [
  { no: 0, name: "GAME_STATE_PENDING_UNSPECIFIED" },
  { no: 1, name: "GAME_STATE_ONGOING" },
  { no: 2, name: "GAME_STATE_PAUSED" },
  { no: 3, name: "GAME_STATE_ENDED" },
]);

/**
 * @generated from message api.v1.EmptyResponse
 */
export class EmptyResponse extends Message<EmptyResponse> {
  constructor(data?: PartialMessage<EmptyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.EmptyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmptyResponse {
    return new EmptyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmptyResponse {
    return new EmptyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmptyResponse {
    return new EmptyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EmptyResponse | PlainMessage<EmptyResponse> | undefined, b: EmptyResponse | PlainMessage<EmptyResponse> | undefined): boolean {
    return proto3.util.equals(EmptyResponse, a, b);
  }
}

/**
 * @generated from message api.v1.RegisterArenaRequest
 */
export class RegisterArenaRequest extends Message<RegisterArenaRequest> {
  /**
   * @generated from field: string arena_uuid = 1;
   */
  arenaUuid = "";

  /**
   * @generated from field: string arena_name = 2;
   */
  arenaName = "";

  /**
   * @generated from field: string arena_email = 3;
   */
  arenaEmail = "";

  constructor(data?: PartialMessage<RegisterArenaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.RegisterArenaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "arena_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "arena_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "arena_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterArenaRequest {
    return new RegisterArenaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterArenaRequest {
    return new RegisterArenaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterArenaRequest {
    return new RegisterArenaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterArenaRequest | PlainMessage<RegisterArenaRequest> | undefined, b: RegisterArenaRequest | PlainMessage<RegisterArenaRequest> | undefined): boolean {
    return proto3.util.equals(RegisterArenaRequest, a, b);
  }
}

/**
 * @generated from message api.v1.GameEvent
 */
export class GameEvent extends Message<GameEvent> {
  /**
   * @generated from field: string arena_uuid = 1;
   */
  arenaUuid = "";

  /**
   * @generated from field: string game_uuid = 2;
   */
  gameUuid = "";

  /**
   * @generated from field: string game_title = 3;
   */
  gameTitle = "";

  /**
   * @generated from field: api.v1.GameState game_state = 4;
   */
  gameState = GameState.PENDING_UNSPECIFIED;

  /**
   * @generated from field: uint32 player_count = 5;
   */
  playerCount = 0;

  constructor(data?: PartialMessage<GameEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GameEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "arena_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "game_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "game_title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "game_state", kind: "enum", T: proto3.getEnumType(GameState) },
    { no: 5, name: "player_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GameEvent {
    return new GameEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GameEvent {
    return new GameEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GameEvent {
    return new GameEvent().fromJsonString(jsonString, options);
  }

  static equals(a: GameEvent | PlainMessage<GameEvent> | undefined, b: GameEvent | PlainMessage<GameEvent> | undefined): boolean {
    return proto3.util.equals(GameEvent, a, b);
  }
}

